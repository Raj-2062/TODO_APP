import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';

import 'package:todo_app/models/todo.dart';
import 'package:todo_app/providers/todo_provider.dart';
import 'package:todo_app/widgets/reusable_widgets.dart'; // Import reusable widgets

class AddEditTodoScreen extends StatefulWidget {
  const AddEditTodoScreen({super.key});

  @override
  State<AddEditTodoScreen> createState() => _AddEditTodoScreenState();
}

class _AddEditTodoScreenState extends State<AddEditTodoScreen> {
  final _formKey = GlobalKey<FormState>(); // Key for form validation
  late TextEditingController _titleController;
  late TextEditingController _descriptionController;
  late DateTime _selectedDueDate;
  late TodoCategory _selectedCategory;
  bool _isCompleted = false;

  Todo? _editingTodo; // Holds the To-Do if we are in edit mode

  @override
  void initState() {
    super.initState();
    _titleController = TextEditingController();
    _descriptionController = TextEditingController();
    _selectedDueDate = DateTime.now(); // Default to today
    _selectedCategory = TodoCategory.personal; // Default category
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    // Retrieve arguments when the route is pushed (e.g., for editing).
    final args = ModalRoute.of(context)?.settings.arguments;
    if (args != null && args is Todo && _editingTodo == null) {
      _editingTodo = args;
      _titleController.text = _editingTodo!.title;
      _descriptionController.text = _editingTodo!.description;
      _selectedDueDate = _editingTodo!.dueDate;
      _selectedCategory = _editingTodo!.category;
      _isCompleted = _editingTodo!.isCompleted;
    }
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  void _saveTodo() {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();

      final todoProvider = Provider.of<TodoProvider>(context, listen: false);

      if (_editingTodo == null) {
        // Add new To-Do
        final newTodo = Todo(
          id: '', // ID will be generated by TodoProvider
          title: _titleController.text,
          description: _descriptionController.text,
          dueDate: _selectedDueDate,
          category: _selectedCategory,
          isCompleted: _isCompleted,
        );
        todoProvider.addTodo(newTodo);
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('To-Do added successfully!')),
        );
      } else {
        // Update existing To-Do
        final updatedTodo = _editingTodo!.copyWith(
          title: _titleController.text,
          description: _descriptionController.text,
          dueDate: _selectedDueDate,
          category: _selectedCategory,
          isCompleted: _isCompleted,
        );
        todoProvider.updateTodo(updatedTodo);
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('To-Do updated successfully!')),
        );
      }
      Navigator.pop(context); // Go back to the home screen
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomAppBar(
        title: _editingTodo == null ? 'Add New To-Do' : 'Edit To-Do',
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              TextFormField(
                controller: _titleController,
                decoration: InputDecoration(
                  labelText: 'Title',
                  hintText: 'Enter To-Do title',
                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a title';
                  }
                  return null;
                },
                onSaved: (value) => _titleController.text = value!,
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _descriptionController,
                decoration: InputDecoration(
                  labelText: 'Description (Optional)',
                  hintText: 'Enter To-Do description',
                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                ),
                maxLines: 3,
                onSaved: (value) => _descriptionController.text = value ?? '',
              ),
              const SizedBox(height: 16),
              DatePickerField(
                initialDate: _selectedDueDate,
                onDateSelected: (date) {
                  setState(() {
                    _selectedDueDate = date;
                  });
                },
                labelText: 'Due Date',
              ),
              const SizedBox(height: 16),
              CategoryDropdown(
                selectedCategory: _selectedCategory,
                onChanged: (category) {
                  if (category != null) {
                    setState(() {
                      _selectedCategory = category;
                    });
                  }
                },
                labelText: 'Category',
              ),
              const SizedBox(height: 16),
              if (_editingTodo != null) // Only show status toggle in edit mode
                Row(
                  children: [
                    Text(
                      'Completed:',
                      style: Theme.of(context).textTheme.titleMedium,
                    ),
                    Expanded(
                      child: Align(
                        alignment: Alignment.centerRight,
                        child: Switch(
                          value: _isCompleted,
                          onChanged: (value) {
                            setState(() {
                              _isCompleted = value;
                            });
                          },
                          activeColor: Theme.of(context).primaryColor,
                        ),
                      ),
                    ),
                  ],
                ),
              const SizedBox(height: 24),
              PrimaryButton(
                text: _editingTodo == null ? 'Add To-Do' : 'Update To-Do',
                onPressed: _saveTodo,
                icon: _editingTodo == null ? Icons.add_task : Icons.save,
              ),
            ],
          ),
        ),
      ),
    );
  }
}
